// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geocoder.proto

#ifndef PROTOBUF_geocoder_2eproto__INCLUDED
#define PROTOBUF_geocoder_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace udorx_geocoder {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_geocoder_2eproto();
void protobuf_AssignDesc_geocoder_2eproto();
void protobuf_ShutdownFile_geocoder_2eproto();

class GeoName;
class GeoRespItem;
class GeoResponse;

// ===================================================================

class GeoName : public ::google::protobuf::MessageLite {
 public:
  GeoName();
  virtual ~GeoName();

  GeoName(const GeoName& from);

  inline GeoName& operator=(const GeoName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const GeoName& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GeoName* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GeoName* other);

  // implements Message ----------------------------------------------

  inline GeoName* New() const { return New(NULL); }

  GeoName* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GeoName& from);
  void MergeFrom(const GeoName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeoName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int64 nameid = 2;
  bool has_nameid() const;
  void clear_nameid();
  static const int kNameidFieldNumber = 2;
  ::google::protobuf::int64 nameid() const;
  void set_nameid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:udorx_geocoder.GeoName)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_nameid();
  inline void clear_has_nameid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 nameid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_geocoder_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_geocoder_2eproto();
  #endif
  friend void protobuf_AssignDesc_geocoder_2eproto();
  friend void protobuf_ShutdownFile_geocoder_2eproto();

  void InitAsDefaultInstance();
  static GeoName* default_instance_;
};
// -------------------------------------------------------------------

class GeoRespItem : public ::google::protobuf::MessageLite {
 public:
  GeoRespItem();
  virtual ~GeoRespItem();

  GeoRespItem(const GeoRespItem& from);

  inline GeoRespItem& operator=(const GeoRespItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const GeoRespItem& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GeoRespItem* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GeoRespItem* other);

  // implements Message ----------------------------------------------

  inline GeoRespItem* New() const { return New(NULL); }

  GeoRespItem* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GeoRespItem& from);
  void MergeFrom(const GeoRespItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeoRespItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .udorx_geocoder.GeoName geoname = 1;
  bool has_geoname() const;
  void clear_geoname();
  static const int kGeonameFieldNumber = 1;
  const ::udorx_geocoder::GeoName& geoname() const;
  ::udorx_geocoder::GeoName* mutable_geoname();
  ::udorx_geocoder::GeoName* release_geoname();
  void set_allocated_geoname(::udorx_geocoder::GeoName* geoname);

  // required .udorx_geocoder.GeoName isinL = 2;
  bool has_isinl() const;
  void clear_isinl();
  static const int kIsinLFieldNumber = 2;
  const ::udorx_geocoder::GeoName& isinl() const;
  ::udorx_geocoder::GeoName* mutable_isinl();
  ::udorx_geocoder::GeoName* release_isinl();
  void set_allocated_isinl(::udorx_geocoder::GeoName* isinl);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // repeated int32 llA = 4;
  int lla_size() const;
  void clear_lla();
  static const int kLlAFieldNumber = 4;
  ::google::protobuf::int32 lla(int index) const;
  void set_lla(int index, ::google::protobuf::int32 value);
  void add_lla(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lla() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lla();

  // @@protoc_insertion_point(class_scope:udorx_geocoder.GeoRespItem)
 private:
  inline void set_has_geoname();
  inline void clear_has_geoname();
  inline void set_has_isinl();
  inline void clear_has_isinl();
  inline void set_has_type();
  inline void clear_has_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::udorx_geocoder::GeoName* geoname_;
  ::udorx_geocoder::GeoName* isinl_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lla_;
  ::google::protobuf::int32 type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_geocoder_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_geocoder_2eproto();
  #endif
  friend void protobuf_AssignDesc_geocoder_2eproto();
  friend void protobuf_ShutdownFile_geocoder_2eproto();

  void InitAsDefaultInstance();
  static GeoRespItem* default_instance_;
};
// -------------------------------------------------------------------

class GeoResponse : public ::google::protobuf::MessageLite {
 public:
  GeoResponse();
  virtual ~GeoResponse();

  GeoResponse(const GeoResponse& from);

  inline GeoResponse& operator=(const GeoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const GeoResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GeoResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GeoResponse* other);

  // implements Message ----------------------------------------------

  inline GeoResponse* New() const { return New(NULL); }

  GeoResponse* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GeoResponse& from);
  void MergeFrom(const GeoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 sts = 1;
  bool has_sts() const;
  void clear_sts();
  static const int kStsFieldNumber = 1;
  ::google::protobuf::int32 sts() const;
  void set_sts(::google::protobuf::int32 value);

  // optional string reqStr = 2;
  bool has_reqstr() const;
  void clear_reqstr();
  static const int kReqStrFieldNumber = 2;
  const ::std::string& reqstr() const;
  void set_reqstr(const ::std::string& value);
  void set_reqstr(const char* value);
  void set_reqstr(const char* value, size_t size);
  ::std::string* mutable_reqstr();
  ::std::string* release_reqstr();
  void set_allocated_reqstr(::std::string* reqstr);

  // repeated .udorx_geocoder.GeoRespItem respIL = 3;
  int respil_size() const;
  void clear_respil();
  static const int kRespILFieldNumber = 3;
  const ::udorx_geocoder::GeoRespItem& respil(int index) const;
  ::udorx_geocoder::GeoRespItem* mutable_respil(int index);
  ::udorx_geocoder::GeoRespItem* add_respil();
  ::google::protobuf::RepeatedPtrField< ::udorx_geocoder::GeoRespItem >*
      mutable_respil();
  const ::google::protobuf::RepeatedPtrField< ::udorx_geocoder::GeoRespItem >&
      respil() const;

  // @@protoc_insertion_point(class_scope:udorx_geocoder.GeoResponse)
 private:
  inline void set_has_sts();
  inline void clear_has_sts();
  inline void set_has_reqstr();
  inline void clear_has_reqstr();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reqstr_;
  ::google::protobuf::RepeatedPtrField< ::udorx_geocoder::GeoRespItem > respil_;
  ::google::protobuf::int32 sts_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_geocoder_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_geocoder_2eproto();
  #endif
  friend void protobuf_AssignDesc_geocoder_2eproto();
  friend void protobuf_ShutdownFile_geocoder_2eproto();

  void InitAsDefaultInstance();
  static GeoResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GeoName

// required string name = 1;
inline bool GeoName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeoName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeoName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeoName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& GeoName::name() const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoName::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udorx_geocoder.GeoName.name)
}
inline void GeoName::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udorx_geocoder.GeoName.name)
}
inline void GeoName::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udorx_geocoder.GeoName.name)
}
inline ::std::string* GeoName::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:udorx_geocoder.GeoName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoName::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:udorx_geocoder.GeoName.name)
}

// required int64 nameid = 2;
inline bool GeoName::has_nameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeoName::set_has_nameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeoName::clear_has_nameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeoName::clear_nameid() {
  nameid_ = GOOGLE_LONGLONG(0);
  clear_has_nameid();
}
inline ::google::protobuf::int64 GeoName::nameid() const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoName.nameid)
  return nameid_;
}
inline void GeoName::set_nameid(::google::protobuf::int64 value) {
  set_has_nameid();
  nameid_ = value;
  // @@protoc_insertion_point(field_set:udorx_geocoder.GeoName.nameid)
}

// -------------------------------------------------------------------

// GeoRespItem

// required .udorx_geocoder.GeoName geoname = 1;
inline bool GeoRespItem::has_geoname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeoRespItem::set_has_geoname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeoRespItem::clear_has_geoname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeoRespItem::clear_geoname() {
  if (geoname_ != NULL) geoname_->::udorx_geocoder::GeoName::Clear();
  clear_has_geoname();
}
inline const ::udorx_geocoder::GeoName& GeoRespItem::geoname() const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoRespItem.geoname)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return geoname_ != NULL ? *geoname_ : *default_instance().geoname_;
#else
  return geoname_ != NULL ? *geoname_ : *default_instance_->geoname_;
#endif
}
inline ::udorx_geocoder::GeoName* GeoRespItem::mutable_geoname() {
  set_has_geoname();
  if (geoname_ == NULL) {
    geoname_ = new ::udorx_geocoder::GeoName;
  }
  // @@protoc_insertion_point(field_mutable:udorx_geocoder.GeoRespItem.geoname)
  return geoname_;
}
inline ::udorx_geocoder::GeoName* GeoRespItem::release_geoname() {
  clear_has_geoname();
  ::udorx_geocoder::GeoName* temp = geoname_;
  geoname_ = NULL;
  return temp;
}
inline void GeoRespItem::set_allocated_geoname(::udorx_geocoder::GeoName* geoname) {
  delete geoname_;
  geoname_ = geoname;
  if (geoname) {
    set_has_geoname();
  } else {
    clear_has_geoname();
  }
  // @@protoc_insertion_point(field_set_allocated:udorx_geocoder.GeoRespItem.geoname)
}

// required .udorx_geocoder.GeoName isinL = 2;
inline bool GeoRespItem::has_isinl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeoRespItem::set_has_isinl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeoRespItem::clear_has_isinl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeoRespItem::clear_isinl() {
  if (isinl_ != NULL) isinl_->::udorx_geocoder::GeoName::Clear();
  clear_has_isinl();
}
inline const ::udorx_geocoder::GeoName& GeoRespItem::isinl() const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoRespItem.isinL)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return isinl_ != NULL ? *isinl_ : *default_instance().isinl_;
#else
  return isinl_ != NULL ? *isinl_ : *default_instance_->isinl_;
#endif
}
inline ::udorx_geocoder::GeoName* GeoRespItem::mutable_isinl() {
  set_has_isinl();
  if (isinl_ == NULL) {
    isinl_ = new ::udorx_geocoder::GeoName;
  }
  // @@protoc_insertion_point(field_mutable:udorx_geocoder.GeoRespItem.isinL)
  return isinl_;
}
inline ::udorx_geocoder::GeoName* GeoRespItem::release_isinl() {
  clear_has_isinl();
  ::udorx_geocoder::GeoName* temp = isinl_;
  isinl_ = NULL;
  return temp;
}
inline void GeoRespItem::set_allocated_isinl(::udorx_geocoder::GeoName* isinl) {
  delete isinl_;
  isinl_ = isinl;
  if (isinl) {
    set_has_isinl();
  } else {
    clear_has_isinl();
  }
  // @@protoc_insertion_point(field_set_allocated:udorx_geocoder.GeoRespItem.isinL)
}

// required int32 type = 3;
inline bool GeoRespItem::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GeoRespItem::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GeoRespItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GeoRespItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GeoRespItem::type() const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoRespItem.type)
  return type_;
}
inline void GeoRespItem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:udorx_geocoder.GeoRespItem.type)
}

// repeated int32 llA = 4;
inline int GeoRespItem::lla_size() const {
  return lla_.size();
}
inline void GeoRespItem::clear_lla() {
  lla_.Clear();
}
inline ::google::protobuf::int32 GeoRespItem::lla(int index) const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoRespItem.llA)
  return lla_.Get(index);
}
inline void GeoRespItem::set_lla(int index, ::google::protobuf::int32 value) {
  lla_.Set(index, value);
  // @@protoc_insertion_point(field_set:udorx_geocoder.GeoRespItem.llA)
}
inline void GeoRespItem::add_lla(::google::protobuf::int32 value) {
  lla_.Add(value);
  // @@protoc_insertion_point(field_add:udorx_geocoder.GeoRespItem.llA)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GeoRespItem::lla() const {
  // @@protoc_insertion_point(field_list:udorx_geocoder.GeoRespItem.llA)
  return lla_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GeoRespItem::mutable_lla() {
  // @@protoc_insertion_point(field_mutable_list:udorx_geocoder.GeoRespItem.llA)
  return &lla_;
}

// -------------------------------------------------------------------

// GeoResponse

// required int32 sts = 1;
inline bool GeoResponse::has_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeoResponse::set_has_sts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeoResponse::clear_has_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeoResponse::clear_sts() {
  sts_ = 0;
  clear_has_sts();
}
inline ::google::protobuf::int32 GeoResponse::sts() const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoResponse.sts)
  return sts_;
}
inline void GeoResponse::set_sts(::google::protobuf::int32 value) {
  set_has_sts();
  sts_ = value;
  // @@protoc_insertion_point(field_set:udorx_geocoder.GeoResponse.sts)
}

// optional string reqStr = 2;
inline bool GeoResponse::has_reqstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeoResponse::set_has_reqstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeoResponse::clear_has_reqstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeoResponse::clear_reqstr() {
  reqstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reqstr();
}
inline const ::std::string& GeoResponse::reqstr() const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoResponse.reqStr)
  return reqstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoResponse::set_reqstr(const ::std::string& value) {
  set_has_reqstr();
  reqstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udorx_geocoder.GeoResponse.reqStr)
}
inline void GeoResponse::set_reqstr(const char* value) {
  set_has_reqstr();
  reqstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udorx_geocoder.GeoResponse.reqStr)
}
inline void GeoResponse::set_reqstr(const char* value, size_t size) {
  set_has_reqstr();
  reqstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udorx_geocoder.GeoResponse.reqStr)
}
inline ::std::string* GeoResponse::mutable_reqstr() {
  set_has_reqstr();
  // @@protoc_insertion_point(field_mutable:udorx_geocoder.GeoResponse.reqStr)
  return reqstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoResponse::release_reqstr() {
  clear_has_reqstr();
  return reqstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoResponse::set_allocated_reqstr(::std::string* reqstr) {
  if (reqstr != NULL) {
    set_has_reqstr();
  } else {
    clear_has_reqstr();
  }
  reqstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reqstr);
  // @@protoc_insertion_point(field_set_allocated:udorx_geocoder.GeoResponse.reqStr)
}

// repeated .udorx_geocoder.GeoRespItem respIL = 3;
inline int GeoResponse::respil_size() const {
  return respil_.size();
}
inline void GeoResponse::clear_respil() {
  respil_.Clear();
}
inline const ::udorx_geocoder::GeoRespItem& GeoResponse::respil(int index) const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoResponse.respIL)
  return respil_.Get(index);
}
inline ::udorx_geocoder::GeoRespItem* GeoResponse::mutable_respil(int index) {
  // @@protoc_insertion_point(field_mutable:udorx_geocoder.GeoResponse.respIL)
  return respil_.Mutable(index);
}
inline ::udorx_geocoder::GeoRespItem* GeoResponse::add_respil() {
  // @@protoc_insertion_point(field_add:udorx_geocoder.GeoResponse.respIL)
  return respil_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::udorx_geocoder::GeoRespItem >*
GeoResponse::mutable_respil() {
  // @@protoc_insertion_point(field_mutable_list:udorx_geocoder.GeoResponse.respIL)
  return &respil_;
}
inline const ::google::protobuf::RepeatedPtrField< ::udorx_geocoder::GeoRespItem >&
GeoResponse::respil() const {
  // @@protoc_insertion_point(field_list:udorx_geocoder.GeoResponse.respIL)
  return respil_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace udorx_geocoder

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geocoder_2eproto__INCLUDED
