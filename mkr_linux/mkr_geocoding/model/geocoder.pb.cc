// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geocoder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "geocoder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace udorx_geocoder {

void protobuf_ShutdownFile_geocoder_2eproto() {
  delete GeoName::default_instance_;
  delete GeoRespItem::default_instance_;
  delete GeoResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_geocoder_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_geocoder_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GeoName::default_instance_ = new GeoName();
  GeoRespItem::default_instance_ = new GeoRespItem();
  GeoResponse::default_instance_ = new GeoResponse();
  GeoName::default_instance_->InitAsDefaultInstance();
  GeoRespItem::default_instance_->InitAsDefaultInstance();
  GeoResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_geocoder_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_geocoder_2eproto_once_);
void protobuf_AddDesc_geocoder_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_geocoder_2eproto_once_,
                 &protobuf_AddDesc_geocoder_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_geocoder_2eproto {
  StaticDescriptorInitializer_geocoder_2eproto() {
    protobuf_AddDesc_geocoder_2eproto();
  }
} static_descriptor_initializer_geocoder_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoName::kNameFieldNumber;
const int GeoName::kNameidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoName::GeoName()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:udorx_geocoder.GeoName)
}

void GeoName::InitAsDefaultInstance() {
}

GeoName::GeoName(const GeoName& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:udorx_geocoder.GeoName)
}

void GeoName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nameid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoName::~GeoName() {
  // @@protoc_insertion_point(destructor:udorx_geocoder.GeoName)
  SharedDtor();
}

void GeoName::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GeoName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GeoName& GeoName::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_geocoder_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_geocoder_2eproto();
#endif
  return *default_instance_;
}

GeoName* GeoName::default_instance_ = NULL;

GeoName* GeoName::New(::google::protobuf::Arena* arena) const {
  GeoName* n = new GeoName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeoName::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    nameid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GeoName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:udorx_geocoder.GeoName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nameid;
        break;
      }

      // required int64 nameid = 2;
      case 2: {
        if (tag == 16) {
         parse_nameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nameid_)));
          set_has_nameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:udorx_geocoder.GeoName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:udorx_geocoder.GeoName)
  return false;
#undef DO_
}

void GeoName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:udorx_geocoder.GeoName)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int64 nameid = 2;
  if (has_nameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nameid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:udorx_geocoder.GeoName)
}

int GeoName::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_nameid()) {
    // required int64 nameid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nameid());
  }

  return total_size;
}
int GeoName::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int64 nameid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nameid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoName::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GeoName*>(&from));
}

void GeoName::MergeFrom(const GeoName& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_nameid()) {
      set_nameid(from.nameid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GeoName::CopyFrom(const GeoName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GeoName::Swap(GeoName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoName::InternalSwap(GeoName* other) {
  name_.Swap(&other->name_);
  std::swap(nameid_, other->nameid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GeoName::GetTypeName() const {
  return "udorx_geocoder.GeoName";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeoName

// required string name = 1;
bool GeoName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeoName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void GeoName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeoName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& GeoName::name() const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GeoName::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udorx_geocoder.GeoName.name)
}
 void GeoName::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udorx_geocoder.GeoName.name)
}
 void GeoName::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udorx_geocoder.GeoName.name)
}
 ::std::string* GeoName::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:udorx_geocoder.GeoName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GeoName::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GeoName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:udorx_geocoder.GeoName.name)
}

// required int64 nameid = 2;
bool GeoName::has_nameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GeoName::set_has_nameid() {
  _has_bits_[0] |= 0x00000002u;
}
void GeoName::clear_has_nameid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GeoName::clear_nameid() {
  nameid_ = GOOGLE_LONGLONG(0);
  clear_has_nameid();
}
 ::google::protobuf::int64 GeoName::nameid() const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoName.nameid)
  return nameid_;
}
 void GeoName::set_nameid(::google::protobuf::int64 value) {
  set_has_nameid();
  nameid_ = value;
  // @@protoc_insertion_point(field_set:udorx_geocoder.GeoName.nameid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoRespItem::kGeonameFieldNumber;
const int GeoRespItem::kIsinLFieldNumber;
const int GeoRespItem::kTypeFieldNumber;
const int GeoRespItem::kLlAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoRespItem::GeoRespItem()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:udorx_geocoder.GeoRespItem)
}

void GeoRespItem::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  geoname_ = const_cast< ::udorx_geocoder::GeoName*>(
      ::udorx_geocoder::GeoName::internal_default_instance());
#else
  geoname_ = const_cast< ::udorx_geocoder::GeoName*>(&::udorx_geocoder::GeoName::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  isinl_ = const_cast< ::udorx_geocoder::GeoName*>(
      ::udorx_geocoder::GeoName::internal_default_instance());
#else
  isinl_ = const_cast< ::udorx_geocoder::GeoName*>(&::udorx_geocoder::GeoName::default_instance());
#endif
}

GeoRespItem::GeoRespItem(const GeoRespItem& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:udorx_geocoder.GeoRespItem)
}

void GeoRespItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geoname_ = NULL;
  isinl_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoRespItem::~GeoRespItem() {
  // @@protoc_insertion_point(destructor:udorx_geocoder.GeoRespItem)
  SharedDtor();
}

void GeoRespItem::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete geoname_;
    delete isinl_;
  }
}

void GeoRespItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GeoRespItem& GeoRespItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_geocoder_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_geocoder_2eproto();
#endif
  return *default_instance_;
}

GeoRespItem* GeoRespItem::default_instance_ = NULL;

GeoRespItem* GeoRespItem::New(::google::protobuf::Arena* arena) const {
  GeoRespItem* n = new GeoRespItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeoRespItem::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_geoname()) {
      if (geoname_ != NULL) geoname_->::udorx_geocoder::GeoName::Clear();
    }
    if (has_isinl()) {
      if (isinl_ != NULL) isinl_->::udorx_geocoder::GeoName::Clear();
    }
    type_ = 0;
  }
  lla_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GeoRespItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:udorx_geocoder.GeoRespItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .udorx_geocoder.GeoName geoname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geoname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_isinL;
        break;
      }

      // required .udorx_geocoder.GeoName isinL = 2;
      case 2: {
        if (tag == 18) {
         parse_isinL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_isinl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_llA;
        break;
      }

      // repeated int32 llA = 4;
      case 4: {
        if (tag == 32) {
         parse_llA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_lla())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lla())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_llA;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:udorx_geocoder.GeoRespItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:udorx_geocoder.GeoRespItem)
  return false;
#undef DO_
}

void GeoRespItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:udorx_geocoder.GeoRespItem)
  // required .udorx_geocoder.GeoName geoname = 1;
  if (has_geoname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->geoname_, output);
  }

  // required .udorx_geocoder.GeoName isinL = 2;
  if (has_isinl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->isinl_, output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // repeated int32 llA = 4;
  for (int i = 0; i < this->lla_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->lla(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:udorx_geocoder.GeoRespItem)
}

int GeoRespItem::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_geoname()) {
    // required .udorx_geocoder.GeoName geoname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->geoname_);
  }

  if (has_isinl()) {
    // required .udorx_geocoder.GeoName isinL = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->isinl_);
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
int GeoRespItem::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .udorx_geocoder.GeoName geoname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->geoname_);

    // required .udorx_geocoder.GeoName isinL = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->isinl_);

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 llA = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->lla_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lla(i));
    }
    total_size += 1 * this->lla_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoRespItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GeoRespItem*>(&from));
}

void GeoRespItem::MergeFrom(const GeoRespItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  lla_.MergeFrom(from.lla_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_geoname()) {
      mutable_geoname()->::udorx_geocoder::GeoName::MergeFrom(from.geoname());
    }
    if (from.has_isinl()) {
      mutable_isinl()->::udorx_geocoder::GeoName::MergeFrom(from.isinl());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GeoRespItem::CopyFrom(const GeoRespItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoRespItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_geoname()) {
    if (!this->geoname_->IsInitialized()) return false;
  }
  if (has_isinl()) {
    if (!this->isinl_->IsInitialized()) return false;
  }
  return true;
}

void GeoRespItem::Swap(GeoRespItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoRespItem::InternalSwap(GeoRespItem* other) {
  std::swap(geoname_, other->geoname_);
  std::swap(isinl_, other->isinl_);
  std::swap(type_, other->type_);
  lla_.UnsafeArenaSwap(&other->lla_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GeoRespItem::GetTypeName() const {
  return "udorx_geocoder.GeoRespItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeoRespItem

// required .udorx_geocoder.GeoName geoname = 1;
bool GeoRespItem::has_geoname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeoRespItem::set_has_geoname() {
  _has_bits_[0] |= 0x00000001u;
}
void GeoRespItem::clear_has_geoname() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeoRespItem::clear_geoname() {
  if (geoname_ != NULL) geoname_->::udorx_geocoder::GeoName::Clear();
  clear_has_geoname();
}
const ::udorx_geocoder::GeoName& GeoRespItem::geoname() const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoRespItem.geoname)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return geoname_ != NULL ? *geoname_ : *default_instance().geoname_;
#else
  return geoname_ != NULL ? *geoname_ : *default_instance_->geoname_;
#endif
}
::udorx_geocoder::GeoName* GeoRespItem::mutable_geoname() {
  set_has_geoname();
  if (geoname_ == NULL) {
    geoname_ = new ::udorx_geocoder::GeoName;
  }
  // @@protoc_insertion_point(field_mutable:udorx_geocoder.GeoRespItem.geoname)
  return geoname_;
}
::udorx_geocoder::GeoName* GeoRespItem::release_geoname() {
  clear_has_geoname();
  ::udorx_geocoder::GeoName* temp = geoname_;
  geoname_ = NULL;
  return temp;
}
void GeoRespItem::set_allocated_geoname(::udorx_geocoder::GeoName* geoname) {
  delete geoname_;
  geoname_ = geoname;
  if (geoname) {
    set_has_geoname();
  } else {
    clear_has_geoname();
  }
  // @@protoc_insertion_point(field_set_allocated:udorx_geocoder.GeoRespItem.geoname)
}

// required .udorx_geocoder.GeoName isinL = 2;
bool GeoRespItem::has_isinl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GeoRespItem::set_has_isinl() {
  _has_bits_[0] |= 0x00000002u;
}
void GeoRespItem::clear_has_isinl() {
  _has_bits_[0] &= ~0x00000002u;
}
void GeoRespItem::clear_isinl() {
  if (isinl_ != NULL) isinl_->::udorx_geocoder::GeoName::Clear();
  clear_has_isinl();
}
const ::udorx_geocoder::GeoName& GeoRespItem::isinl() const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoRespItem.isinL)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return isinl_ != NULL ? *isinl_ : *default_instance().isinl_;
#else
  return isinl_ != NULL ? *isinl_ : *default_instance_->isinl_;
#endif
}
::udorx_geocoder::GeoName* GeoRespItem::mutable_isinl() {
  set_has_isinl();
  if (isinl_ == NULL) {
    isinl_ = new ::udorx_geocoder::GeoName;
  }
  // @@protoc_insertion_point(field_mutable:udorx_geocoder.GeoRespItem.isinL)
  return isinl_;
}
::udorx_geocoder::GeoName* GeoRespItem::release_isinl() {
  clear_has_isinl();
  ::udorx_geocoder::GeoName* temp = isinl_;
  isinl_ = NULL;
  return temp;
}
void GeoRespItem::set_allocated_isinl(::udorx_geocoder::GeoName* isinl) {
  delete isinl_;
  isinl_ = isinl;
  if (isinl) {
    set_has_isinl();
  } else {
    clear_has_isinl();
  }
  // @@protoc_insertion_point(field_set_allocated:udorx_geocoder.GeoRespItem.isinL)
}

// required int32 type = 3;
bool GeoRespItem::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GeoRespItem::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void GeoRespItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void GeoRespItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 GeoRespItem::type() const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoRespItem.type)
  return type_;
}
 void GeoRespItem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:udorx_geocoder.GeoRespItem.type)
}

// repeated int32 llA = 4;
int GeoRespItem::lla_size() const {
  return lla_.size();
}
void GeoRespItem::clear_lla() {
  lla_.Clear();
}
 ::google::protobuf::int32 GeoRespItem::lla(int index) const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoRespItem.llA)
  return lla_.Get(index);
}
 void GeoRespItem::set_lla(int index, ::google::protobuf::int32 value) {
  lla_.Set(index, value);
  // @@protoc_insertion_point(field_set:udorx_geocoder.GeoRespItem.llA)
}
 void GeoRespItem::add_lla(::google::protobuf::int32 value) {
  lla_.Add(value);
  // @@protoc_insertion_point(field_add:udorx_geocoder.GeoRespItem.llA)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GeoRespItem::lla() const {
  // @@protoc_insertion_point(field_list:udorx_geocoder.GeoRespItem.llA)
  return lla_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GeoRespItem::mutable_lla() {
  // @@protoc_insertion_point(field_mutable_list:udorx_geocoder.GeoRespItem.llA)
  return &lla_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoResponse::kStsFieldNumber;
const int GeoResponse::kReqStrFieldNumber;
const int GeoResponse::kRespILFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoResponse::GeoResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:udorx_geocoder.GeoResponse)
}

void GeoResponse::InitAsDefaultInstance() {
}

GeoResponse::GeoResponse(const GeoResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:udorx_geocoder.GeoResponse)
}

void GeoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sts_ = 0;
  reqstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoResponse::~GeoResponse() {
  // @@protoc_insertion_point(destructor:udorx_geocoder.GeoResponse)
  SharedDtor();
}

void GeoResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reqstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GeoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GeoResponse& GeoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_geocoder_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_geocoder_2eproto();
#endif
  return *default_instance_;
}

GeoResponse* GeoResponse::default_instance_ = NULL;

GeoResponse* GeoResponse::New(::google::protobuf::Arena* arena) const {
  GeoResponse* n = new GeoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeoResponse::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    sts_ = 0;
    if (has_reqstr()) {
      reqstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  respil_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GeoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:udorx_geocoder.GeoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reqStr;
        break;
      }

      // optional string reqStr = 2;
      case 2: {
        if (tag == 18) {
         parse_reqStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reqstr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_respIL;
        break;
      }

      // repeated .udorx_geocoder.GeoRespItem respIL = 3;
      case 3: {
        if (tag == 26) {
         parse_respIL:
          DO_(input->IncrementRecursionDepth());
         parse_loop_respIL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_respil()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_respIL;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:udorx_geocoder.GeoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:udorx_geocoder.GeoResponse)
  return false;
#undef DO_
}

void GeoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:udorx_geocoder.GeoResponse)
  // required int32 sts = 1;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sts(), output);
  }

  // optional string reqStr = 2;
  if (has_reqstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reqstr(), output);
  }

  // repeated .udorx_geocoder.GeoRespItem respIL = 3;
  for (unsigned int i = 0, n = this->respil_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->respil(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:udorx_geocoder.GeoResponse)
}

int GeoResponse::ByteSize() const {
  int total_size = 0;

  // required int32 sts = 1;
  if (has_sts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sts());
  }
  // optional string reqStr = 2;
  if (has_reqstr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reqstr());
  }

  // repeated .udorx_geocoder.GeoRespItem respIL = 3;
  total_size += 1 * this->respil_size();
  for (int i = 0; i < this->respil_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->respil(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GeoResponse*>(&from));
}

void GeoResponse::MergeFrom(const GeoResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  respil_.MergeFrom(from.respil_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sts()) {
      set_sts(from.sts());
    }
    if (from.has_reqstr()) {
      set_has_reqstr();
      reqstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reqstr_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GeoResponse::CopyFrom(const GeoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->respil())) return false;
  return true;
}

void GeoResponse::Swap(GeoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoResponse::InternalSwap(GeoResponse* other) {
  std::swap(sts_, other->sts_);
  reqstr_.Swap(&other->reqstr_);
  respil_.UnsafeArenaSwap(&other->respil_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GeoResponse::GetTypeName() const {
  return "udorx_geocoder.GeoResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeoResponse

// required int32 sts = 1;
bool GeoResponse::has_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeoResponse::set_has_sts() {
  _has_bits_[0] |= 0x00000001u;
}
void GeoResponse::clear_has_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeoResponse::clear_sts() {
  sts_ = 0;
  clear_has_sts();
}
 ::google::protobuf::int32 GeoResponse::sts() const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoResponse.sts)
  return sts_;
}
 void GeoResponse::set_sts(::google::protobuf::int32 value) {
  set_has_sts();
  sts_ = value;
  // @@protoc_insertion_point(field_set:udorx_geocoder.GeoResponse.sts)
}

// optional string reqStr = 2;
bool GeoResponse::has_reqstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GeoResponse::set_has_reqstr() {
  _has_bits_[0] |= 0x00000002u;
}
void GeoResponse::clear_has_reqstr() {
  _has_bits_[0] &= ~0x00000002u;
}
void GeoResponse::clear_reqstr() {
  reqstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reqstr();
}
 const ::std::string& GeoResponse::reqstr() const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoResponse.reqStr)
  return reqstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GeoResponse::set_reqstr(const ::std::string& value) {
  set_has_reqstr();
  reqstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udorx_geocoder.GeoResponse.reqStr)
}
 void GeoResponse::set_reqstr(const char* value) {
  set_has_reqstr();
  reqstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udorx_geocoder.GeoResponse.reqStr)
}
 void GeoResponse::set_reqstr(const char* value, size_t size) {
  set_has_reqstr();
  reqstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udorx_geocoder.GeoResponse.reqStr)
}
 ::std::string* GeoResponse::mutable_reqstr() {
  set_has_reqstr();
  // @@protoc_insertion_point(field_mutable:udorx_geocoder.GeoResponse.reqStr)
  return reqstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GeoResponse::release_reqstr() {
  clear_has_reqstr();
  return reqstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GeoResponse::set_allocated_reqstr(::std::string* reqstr) {
  if (reqstr != NULL) {
    set_has_reqstr();
  } else {
    clear_has_reqstr();
  }
  reqstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reqstr);
  // @@protoc_insertion_point(field_set_allocated:udorx_geocoder.GeoResponse.reqStr)
}

// repeated .udorx_geocoder.GeoRespItem respIL = 3;
int GeoResponse::respil_size() const {
  return respil_.size();
}
void GeoResponse::clear_respil() {
  respil_.Clear();
}
const ::udorx_geocoder::GeoRespItem& GeoResponse::respil(int index) const {
  // @@protoc_insertion_point(field_get:udorx_geocoder.GeoResponse.respIL)
  return respil_.Get(index);
}
::udorx_geocoder::GeoRespItem* GeoResponse::mutable_respil(int index) {
  // @@protoc_insertion_point(field_mutable:udorx_geocoder.GeoResponse.respIL)
  return respil_.Mutable(index);
}
::udorx_geocoder::GeoRespItem* GeoResponse::add_respil() {
  // @@protoc_insertion_point(field_add:udorx_geocoder.GeoResponse.respIL)
  return respil_.Add();
}
::google::protobuf::RepeatedPtrField< ::udorx_geocoder::GeoRespItem >*
GeoResponse::mutable_respil() {
  // @@protoc_insertion_point(field_mutable_list:udorx_geocoder.GeoResponse.respIL)
  return &respil_;
}
const ::google::protobuf::RepeatedPtrField< ::udorx_geocoder::GeoRespItem >&
GeoResponse::respil() const {
  // @@protoc_insertion_point(field_list:udorx_geocoder.GeoResponse.respIL)
  return respil_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace udorx_geocoder

// @@protoc_insertion_point(global_scope)
