// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: udorx_ws_comm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "udorx_ws_comm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace udorx_pbf {

namespace {

const ::google::protobuf::Descriptor* AssetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClsGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClsGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* PPointLL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PPointLL_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoiData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoiData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClsLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClsLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* PEmplList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PEmplList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RttHBList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RttHBList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_udorx_5fws_5fcomm_2eproto() {
  protobuf_AddDesc_udorx_5fws_5fcomm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "udorx_ws_comm.proto");
  GOOGLE_CHECK(file != NULL);
  AssetData_descriptor_ = file->message_type(0);
  static const int AssetData_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, did_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, spd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, cog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, its_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, sensors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, type_),
  };
  AssetData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AssetData_descriptor_,
      AssetData::default_instance_,
      AssetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, _has_bits_[0]),
      -1,
      -1,
      sizeof(AssetData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, _internal_metadata_),
      -1);
  ClsGroup_descriptor_ = file->message_type(1);
  static const int ClsGroup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsGroup, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsGroup, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsGroup, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsGroup, type_),
  };
  ClsGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClsGroup_descriptor_,
      ClsGroup::default_instance_,
      ClsGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsGroup, _has_bits_[0]),
      -1,
      -1,
      sizeof(ClsGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsGroup, _internal_metadata_),
      -1);
  PPointLL_descriptor_ = file->message_type(2);
  static const int PPointLL_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PPointLL, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PPointLL, lon_),
  };
  PPointLL_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PPointLL_descriptor_,
      PPointLL::default_instance_,
      PPointLL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PPointLL, _has_bits_[0]),
      -1,
      -1,
      sizeof(PPointLL),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PPointLL, _internal_metadata_),
      -1);
  PoiData_descriptor_ = file->message_type(3);
  static const int PoiData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiData, grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiData, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiData, pnts_),
  };
  PoiData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PoiData_descriptor_,
      PoiData::default_instance_,
      PoiData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiData, _has_bits_[0]),
      -1,
      -1,
      sizeof(PoiData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiData, _internal_metadata_),
      -1);
  ClsLogin_descriptor_ = file->message_type(4);
  static const int ClsLogin_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLogin, lgn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLogin, assets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLogin, a_groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLogin, pois_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLogin, p_groups_),
  };
  ClsLogin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClsLogin_descriptor_,
      ClsLogin::default_instance_,
      ClsLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLogin, _has_bits_[0]),
      -1,
      -1,
      sizeof(ClsLogin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClsLogin, _internal_metadata_),
      -1);
  PEmplList_descriptor_ = file->message_type(5);
  static const int PEmplList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEmplList, list_),
  };
  PEmplList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PEmplList_descriptor_,
      PEmplList::default_instance_,
      PEmplList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEmplList, _has_bits_[0]),
      -1,
      -1,
      sizeof(PEmplList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEmplList, _internal_metadata_),
      -1);
  RttHBList_descriptor_ = file->message_type(6);
  static const int RttHBList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RttHBList, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RttHBList, cs_list_),
  };
  RttHBList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RttHBList_descriptor_,
      RttHBList::default_instance_,
      RttHBList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RttHBList, _has_bits_[0]),
      -1,
      -1,
      sizeof(RttHBList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RttHBList, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_udorx_5fws_5fcomm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AssetData_descriptor_, &AssetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClsGroup_descriptor_, &ClsGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PPointLL_descriptor_, &PPointLL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PoiData_descriptor_, &PoiData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClsLogin_descriptor_, &ClsLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PEmplList_descriptor_, &PEmplList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RttHBList_descriptor_, &RttHBList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_udorx_5fws_5fcomm_2eproto() {
  delete AssetData::default_instance_;
  delete AssetData_reflection_;
  delete ClsGroup::default_instance_;
  delete ClsGroup_reflection_;
  delete PPointLL::default_instance_;
  delete PPointLL_reflection_;
  delete PoiData::default_instance_;
  delete PoiData_reflection_;
  delete ClsLogin::default_instance_;
  delete ClsLogin_reflection_;
  delete PEmplList::default_instance_;
  delete PEmplList_reflection_;
  delete RttHBList::default_instance_;
  delete RttHBList_reflection_;
}

void protobuf_AddDesc_udorx_5fws_5fcomm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::udorx_pbf::protobuf_AddDesc_udorx_5fcomm_2eproto();
  ::udorx_pbf::protobuf_AddDesc_udorx_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023udorx_ws_comm.proto\022\tudorx_pbf\032\020udorx_"
    "comm.proto\032\022udorx_common.proto\"\334\001\n\tAsset"
    "Data\022\n\n\002ID\030\001 \002(\005\022\013\n\003cid\030\002 \002(\005\022\014\n\004grID\030\003 "
    "\002(\005\022\020\n\010username\030\004 \002(\t\022\014\n\004Desc\030\005 \002(\t\022\013\n\003D"
    "id\030\006 \002(\t\022\013\n\003lat\030\007 \002(\002\022\013\n\003lon\030\010 \002(\002\022\013\n\003Sp"
    "d\030\t \002(\005\022\013\n\003Cog\030\n \002(\002\022\n\n\002TS\030\013 \002(\003\022\013\n\003ITS\030"
    "\014 \002(\003\022\017\n\007Sensors\030\r \002(\t\022\017\n\007Address\030\016 \002(\t\022"
    "\014\n\004type\030\017 \002(\005\"\?\n\010ClsGroup\022\n\n\002ID\030\001 \002(\005\022\014\n"
    "\004Desc\030\002 \002(\t\022\013\n\003Img\030\003 \002(\t\022\014\n\004Type\030\004 \002(\005\"$"
    "\n\010PPointLL\022\013\n\003lat\030\001 \002(\002\022\013\n\003lon\030\002 \002(\002\"\201\001\n"
    "\007PoiData\022\n\n\002ID\030\001 \002(\t\022\014\n\004grID\030\002 \002(\005\022\014\n\004Na"
    "me\030\003 \002(\t\022\016\n\006Radius\030\004 \002(\002\022\014\n\004Type\030\005 \002(\005\022\r"
    "\n\005color\030\006 \002(\005\022!\n\004pnts\030\007 \003(\0132\023.udorx_pbf."
    "PPointLL\"\300\001\n\010ClsLogin\022\036\n\003lgn\030\001 \002(\0132\021.udo"
    "rx_pbf.CLogin\022$\n\006assets\030\002 \003(\0132\024.udorx_pb"
    "f.AssetData\022%\n\010a_groups\030\003 \003(\0132\023.udorx_pb"
    "f.ClsGroup\022 \n\004pois\030\004 \003(\0132\022.udorx_pbf.Poi"
    "Data\022%\n\010p_groups\030\005 \003(\0132\023.udorx_pbf.ClsGr"
    "oup\"+\n\tPEmplList\022\036\n\004list\030\001 \003(\0132\020.udorx_p"
    "bf.PEmpl\"R\n\tRttHBList\022 \n\006events\030\001 \003(\0132\020."
    "udorx_pbf.RttHB\022#\n\007cs_list\030\002 \001(\0132\022.udorx"
    "_pbf.PCSList", 852);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "udorx_ws_comm.proto", &protobuf_RegisterTypes);
  AssetData::default_instance_ = new AssetData();
  ClsGroup::default_instance_ = new ClsGroup();
  PPointLL::default_instance_ = new PPointLL();
  PoiData::default_instance_ = new PoiData();
  ClsLogin::default_instance_ = new ClsLogin();
  PEmplList::default_instance_ = new PEmplList();
  RttHBList::default_instance_ = new RttHBList();
  AssetData::default_instance_->InitAsDefaultInstance();
  ClsGroup::default_instance_->InitAsDefaultInstance();
  PPointLL::default_instance_->InitAsDefaultInstance();
  PoiData::default_instance_->InitAsDefaultInstance();
  ClsLogin::default_instance_->InitAsDefaultInstance();
  PEmplList::default_instance_->InitAsDefaultInstance();
  RttHBList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_udorx_5fws_5fcomm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_udorx_5fws_5fcomm_2eproto {
  StaticDescriptorInitializer_udorx_5fws_5fcomm_2eproto() {
    protobuf_AddDesc_udorx_5fws_5fcomm_2eproto();
  }
} static_descriptor_initializer_udorx_5fws_5fcomm_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AssetData::kIDFieldNumber;
const int AssetData::kCidFieldNumber;
const int AssetData::kGrIDFieldNumber;
const int AssetData::kUsernameFieldNumber;
const int AssetData::kDescFieldNumber;
const int AssetData::kDidFieldNumber;
const int AssetData::kLatFieldNumber;
const int AssetData::kLonFieldNumber;
const int AssetData::kSpdFieldNumber;
const int AssetData::kCogFieldNumber;
const int AssetData::kTSFieldNumber;
const int AssetData::kITSFieldNumber;
const int AssetData::kSensorsFieldNumber;
const int AssetData::kAddressFieldNumber;
const int AssetData::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AssetData::AssetData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:udorx_pbf.AssetData)
}

void AssetData::InitAsDefaultInstance() {
}

AssetData::AssetData(const AssetData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:udorx_pbf.AssetData)
}

void AssetData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  cid_ = 0;
  grid_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  did_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lat_ = 0;
  lon_ = 0;
  spd_ = 0;
  cog_ = 0;
  ts_ = GOOGLE_LONGLONG(0);
  its_ = GOOGLE_LONGLONG(0);
  sensors_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssetData::~AssetData() {
  // @@protoc_insertion_point(destructor:udorx_pbf.AssetData)
  SharedDtor();
}

void AssetData::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  did_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensors_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AssetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssetData_descriptor_;
}

const AssetData& AssetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_udorx_5fws_5fcomm_2eproto();
  return *default_instance_;
}

AssetData* AssetData::default_instance_ = NULL;

AssetData* AssetData::New(::google::protobuf::Arena* arena) const {
  AssetData* n = new AssetData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AssetData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AssetData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(id_, cid_);
    ZR_(grid_, lat_);
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_desc()) {
      desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_did()) {
      did_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    lon_ = 0;
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ZR_(spd_, type_);
    if (has_sensors()) {
      sensors_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_address()) {
      address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AssetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:udorx_pbf.AssetData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required int32 cid = 2;
      case 2: {
        if (tag == 16) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_grID;
        break;
      }

      // required int32 grID = 3;
      case 3: {
        if (tag == 24) {
         parse_grID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_)));
          set_has_grid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_username;
        break;
      }

      // required string username = 4;
      case 4: {
        if (tag == 34) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "udorx_pbf.AssetData.username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Desc;
        break;
      }

      // required string Desc = 5;
      case 5: {
        if (tag == 42) {
         parse_Desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "udorx_pbf.AssetData.Desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Did;
        break;
      }

      // required string Did = 6;
      case 6: {
        if (tag == 50) {
         parse_Did:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_did()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->did().data(), this->did().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "udorx_pbf.AssetData.Did");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_lat;
        break;
      }

      // required float lat = 7;
      case 7: {
        if (tag == 61) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_lon;
        break;
      }

      // required float lon = 8;
      case 8: {
        if (tag == 69) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Spd;
        break;
      }

      // required int32 Spd = 9;
      case 9: {
        if (tag == 72) {
         parse_Spd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spd_)));
          set_has_spd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_Cog;
        break;
      }

      // required float Cog = 10;
      case 10: {
        if (tag == 85) {
         parse_Cog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cog_)));
          set_has_cog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_TS;
        break;
      }

      // required int64 TS = 11;
      case 11: {
        if (tag == 88) {
         parse_TS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ITS;
        break;
      }

      // required int64 ITS = 12;
      case 12: {
        if (tag == 96) {
         parse_ITS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &its_)));
          set_has_its();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Sensors;
        break;
      }

      // required string Sensors = 13;
      case 13: {
        if (tag == 106) {
         parse_Sensors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sensors().data(), this->sensors().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "udorx_pbf.AssetData.Sensors");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_Address;
        break;
      }

      // required string Address = 14;
      case 14: {
        if (tag == 114) {
         parse_Address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "udorx_pbf.AssetData.Address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_type;
        break;
      }

      // required int32 type = 15;
      case 15: {
        if (tag == 120) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:udorx_pbf.AssetData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:udorx_pbf.AssetData)
  return false;
#undef DO_
}

void AssetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:udorx_pbf.AssetData)
  // required int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cid(), output);
  }

  // required int32 grID = 3;
  if (has_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grid(), output);
  }

  // required string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.AssetData.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // required string Desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.AssetData.Desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->desc(), output);
  }

  // required string Did = 6;
  if (has_did()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->did().data(), this->did().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.AssetData.Did");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->did(), output);
  }

  // required float lat = 7;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->lat(), output);
  }

  // required float lon = 8;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->lon(), output);
  }

  // required int32 Spd = 9;
  if (has_spd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->spd(), output);
  }

  // required float Cog = 10;
  if (has_cog()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->cog(), output);
  }

  // required int64 TS = 11;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->ts(), output);
  }

  // required int64 ITS = 12;
  if (has_its()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->its(), output);
  }

  // required string Sensors = 13;
  if (has_sensors()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensors().data(), this->sensors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.AssetData.Sensors");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->sensors(), output);
  }

  // required string Address = 14;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.AssetData.Address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->address(), output);
  }

  // required int32 type = 15;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:udorx_pbf.AssetData)
}

::google::protobuf::uint8* AssetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:udorx_pbf.AssetData)
  // required int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cid(), target);
  }

  // required int32 grID = 3;
  if (has_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grid(), target);
  }

  // required string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.AssetData.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // required string Desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.AssetData.Desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc(), target);
  }

  // required string Did = 6;
  if (has_did()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->did().data(), this->did().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.AssetData.Did");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->did(), target);
  }

  // required float lat = 7;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->lat(), target);
  }

  // required float lon = 8;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->lon(), target);
  }

  // required int32 Spd = 9;
  if (has_spd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->spd(), target);
  }

  // required float Cog = 10;
  if (has_cog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->cog(), target);
  }

  // required int64 TS = 11;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->ts(), target);
  }

  // required int64 ITS = 12;
  if (has_its()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->its(), target);
  }

  // required string Sensors = 13;
  if (has_sensors()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensors().data(), this->sensors().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.AssetData.Sensors");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->sensors(), target);
  }

  // required string Address = 14;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.AssetData.Address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->address(), target);
  }

  // required int32 type = 15;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:udorx_pbf.AssetData)
  return target;
}

int AssetData::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_cid()) {
    // required int32 cid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());
  }

  if (has_grid()) {
    // required int32 grID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grid());
  }

  if (has_username()) {
    // required string username = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_desc()) {
    // required string Desc = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  if (has_did()) {
    // required string Did = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->did());
  }

  if (has_lat()) {
    // required float lat = 7;
    total_size += 1 + 4;
  }

  if (has_lon()) {
    // required float lon = 8;
    total_size += 1 + 4;
  }

  if (has_spd()) {
    // required int32 Spd = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->spd());
  }

  if (has_cog()) {
    // required float Cog = 10;
    total_size += 1 + 4;
  }

  if (has_ts()) {
    // required int64 TS = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ts());
  }

  if (has_its()) {
    // required int64 ITS = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->its());
  }

  if (has_sensors()) {
    // required string Sensors = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensors());
  }

  if (has_address()) {
    // required string Address = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  if (has_type()) {
    // required int32 type = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
int AssetData::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00007fff) ^ 0x00007fff) == 0) {  // All required fields are present.
    // required int32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 cid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());

    // required int32 grID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grid());

    // required string username = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required string Desc = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());

    // required string Did = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->did());

    // required float lat = 7;
    total_size += 1 + 4;

    // required float lon = 8;
    total_size += 1 + 4;

    // required int32 Spd = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->spd());

    // required float Cog = 10;
    total_size += 1 + 4;

    // required int64 TS = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ts());

    // required int64 ITS = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->its());

    // required string Sensors = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensors());

    // required string Address = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());

    // required int32 type = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssetData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AssetData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AssetData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssetData::MergeFrom(const AssetData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_grid()) {
      set_grid(from.grid());
    }
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_desc()) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (from.has_did()) {
      set_has_did();
      did_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.did_);
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_spd()) {
      set_spd(from.spd());
    }
    if (from.has_cog()) {
      set_cog(from.cog());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_its()) {
      set_its(from.its());
    }
    if (from.has_sensors()) {
      set_has_sensors();
      sensors_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensors_);
    }
    if (from.has_address()) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AssetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetData::CopyFrom(const AssetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void AssetData::Swap(AssetData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AssetData::InternalSwap(AssetData* other) {
  std::swap(id_, other->id_);
  std::swap(cid_, other->cid_);
  std::swap(grid_, other->grid_);
  username_.Swap(&other->username_);
  desc_.Swap(&other->desc_);
  did_.Swap(&other->did_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(spd_, other->spd_);
  std::swap(cog_, other->cog_);
  std::swap(ts_, other->ts_);
  std::swap(its_, other->its_);
  sensors_.Swap(&other->sensors_);
  address_.Swap(&other->address_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AssetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssetData_descriptor_;
  metadata.reflection = AssetData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AssetData

// required int32 ID = 1;
bool AssetData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AssetData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AssetData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AssetData::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 AssetData::id() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.ID)
  return id_;
}
 void AssetData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.ID)
}

// required int32 cid = 2;
bool AssetData::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AssetData::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
void AssetData::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AssetData::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
 ::google::protobuf::int32 AssetData::cid() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.cid)
  return cid_;
}
 void AssetData::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.cid)
}

// required int32 grID = 3;
bool AssetData::has_grid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AssetData::set_has_grid() {
  _has_bits_[0] |= 0x00000004u;
}
void AssetData::clear_has_grid() {
  _has_bits_[0] &= ~0x00000004u;
}
void AssetData::clear_grid() {
  grid_ = 0;
  clear_has_grid();
}
 ::google::protobuf::int32 AssetData::grid() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.grID)
  return grid_;
}
 void AssetData::set_grid(::google::protobuf::int32 value) {
  set_has_grid();
  grid_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.grID)
}

// required string username = 4;
bool AssetData::has_username() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AssetData::set_has_username() {
  _has_bits_[0] |= 0x00000008u;
}
void AssetData::clear_has_username() {
  _has_bits_[0] &= ~0x00000008u;
}
void AssetData::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& AssetData::username() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AssetData::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.username)
}
 void AssetData::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udorx_pbf.AssetData.username)
}
 void AssetData::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udorx_pbf.AssetData.username)
}
 ::std::string* AssetData::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:udorx_pbf.AssetData.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AssetData::release_username() {
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AssetData::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:udorx_pbf.AssetData.username)
}

// required string Desc = 5;
bool AssetData::has_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AssetData::set_has_desc() {
  _has_bits_[0] |= 0x00000010u;
}
void AssetData::clear_has_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
void AssetData::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
 const ::std::string& AssetData::desc() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.Desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AssetData::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.Desc)
}
 void AssetData::set_desc(const char* value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udorx_pbf.AssetData.Desc)
}
 void AssetData::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udorx_pbf.AssetData.Desc)
}
 ::std::string* AssetData::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:udorx_pbf.AssetData.Desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AssetData::release_desc() {
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AssetData::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:udorx_pbf.AssetData.Desc)
}

// required string Did = 6;
bool AssetData::has_did() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AssetData::set_has_did() {
  _has_bits_[0] |= 0x00000020u;
}
void AssetData::clear_has_did() {
  _has_bits_[0] &= ~0x00000020u;
}
void AssetData::clear_did() {
  did_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_did();
}
 const ::std::string& AssetData::did() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.Did)
  return did_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AssetData::set_did(const ::std::string& value) {
  set_has_did();
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.Did)
}
 void AssetData::set_did(const char* value) {
  set_has_did();
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udorx_pbf.AssetData.Did)
}
 void AssetData::set_did(const char* value, size_t size) {
  set_has_did();
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udorx_pbf.AssetData.Did)
}
 ::std::string* AssetData::mutable_did() {
  set_has_did();
  // @@protoc_insertion_point(field_mutable:udorx_pbf.AssetData.Did)
  return did_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AssetData::release_did() {
  clear_has_did();
  return did_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AssetData::set_allocated_did(::std::string* did) {
  if (did != NULL) {
    set_has_did();
  } else {
    clear_has_did();
  }
  did_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), did);
  // @@protoc_insertion_point(field_set_allocated:udorx_pbf.AssetData.Did)
}

// required float lat = 7;
bool AssetData::has_lat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AssetData::set_has_lat() {
  _has_bits_[0] |= 0x00000040u;
}
void AssetData::clear_has_lat() {
  _has_bits_[0] &= ~0x00000040u;
}
void AssetData::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
 float AssetData::lat() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.lat)
  return lat_;
}
 void AssetData::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.lat)
}

// required float lon = 8;
bool AssetData::has_lon() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AssetData::set_has_lon() {
  _has_bits_[0] |= 0x00000080u;
}
void AssetData::clear_has_lon() {
  _has_bits_[0] &= ~0x00000080u;
}
void AssetData::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
 float AssetData::lon() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.lon)
  return lon_;
}
 void AssetData::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.lon)
}

// required int32 Spd = 9;
bool AssetData::has_spd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AssetData::set_has_spd() {
  _has_bits_[0] |= 0x00000100u;
}
void AssetData::clear_has_spd() {
  _has_bits_[0] &= ~0x00000100u;
}
void AssetData::clear_spd() {
  spd_ = 0;
  clear_has_spd();
}
 ::google::protobuf::int32 AssetData::spd() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.Spd)
  return spd_;
}
 void AssetData::set_spd(::google::protobuf::int32 value) {
  set_has_spd();
  spd_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.Spd)
}

// required float Cog = 10;
bool AssetData::has_cog() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void AssetData::set_has_cog() {
  _has_bits_[0] |= 0x00000200u;
}
void AssetData::clear_has_cog() {
  _has_bits_[0] &= ~0x00000200u;
}
void AssetData::clear_cog() {
  cog_ = 0;
  clear_has_cog();
}
 float AssetData::cog() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.Cog)
  return cog_;
}
 void AssetData::set_cog(float value) {
  set_has_cog();
  cog_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.Cog)
}

// required int64 TS = 11;
bool AssetData::has_ts() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void AssetData::set_has_ts() {
  _has_bits_[0] |= 0x00000400u;
}
void AssetData::clear_has_ts() {
  _has_bits_[0] &= ~0x00000400u;
}
void AssetData::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
  clear_has_ts();
}
 ::google::protobuf::int64 AssetData::ts() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.TS)
  return ts_;
}
 void AssetData::set_ts(::google::protobuf::int64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.TS)
}

// required int64 ITS = 12;
bool AssetData::has_its() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void AssetData::set_has_its() {
  _has_bits_[0] |= 0x00000800u;
}
void AssetData::clear_has_its() {
  _has_bits_[0] &= ~0x00000800u;
}
void AssetData::clear_its() {
  its_ = GOOGLE_LONGLONG(0);
  clear_has_its();
}
 ::google::protobuf::int64 AssetData::its() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.ITS)
  return its_;
}
 void AssetData::set_its(::google::protobuf::int64 value) {
  set_has_its();
  its_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.ITS)
}

// required string Sensors = 13;
bool AssetData::has_sensors() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void AssetData::set_has_sensors() {
  _has_bits_[0] |= 0x00001000u;
}
void AssetData::clear_has_sensors() {
  _has_bits_[0] &= ~0x00001000u;
}
void AssetData::clear_sensors() {
  sensors_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensors();
}
 const ::std::string& AssetData::sensors() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.Sensors)
  return sensors_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AssetData::set_sensors(const ::std::string& value) {
  set_has_sensors();
  sensors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.Sensors)
}
 void AssetData::set_sensors(const char* value) {
  set_has_sensors();
  sensors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udorx_pbf.AssetData.Sensors)
}
 void AssetData::set_sensors(const char* value, size_t size) {
  set_has_sensors();
  sensors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udorx_pbf.AssetData.Sensors)
}
 ::std::string* AssetData::mutable_sensors() {
  set_has_sensors();
  // @@protoc_insertion_point(field_mutable:udorx_pbf.AssetData.Sensors)
  return sensors_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AssetData::release_sensors() {
  clear_has_sensors();
  return sensors_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AssetData::set_allocated_sensors(::std::string* sensors) {
  if (sensors != NULL) {
    set_has_sensors();
  } else {
    clear_has_sensors();
  }
  sensors_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensors);
  // @@protoc_insertion_point(field_set_allocated:udorx_pbf.AssetData.Sensors)
}

// required string Address = 14;
bool AssetData::has_address() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void AssetData::set_has_address() {
  _has_bits_[0] |= 0x00002000u;
}
void AssetData::clear_has_address() {
  _has_bits_[0] &= ~0x00002000u;
}
void AssetData::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
 const ::std::string& AssetData::address() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.Address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AssetData::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.Address)
}
 void AssetData::set_address(const char* value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udorx_pbf.AssetData.Address)
}
 void AssetData::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udorx_pbf.AssetData.Address)
}
 ::std::string* AssetData::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:udorx_pbf.AssetData.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AssetData::release_address() {
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AssetData::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:udorx_pbf.AssetData.Address)
}

// required int32 type = 15;
bool AssetData::has_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void AssetData::set_has_type() {
  _has_bits_[0] |= 0x00004000u;
}
void AssetData::clear_has_type() {
  _has_bits_[0] &= ~0x00004000u;
}
void AssetData::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 AssetData::type() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.AssetData.type)
  return type_;
}
 void AssetData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.AssetData.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClsGroup::kIDFieldNumber;
const int ClsGroup::kDescFieldNumber;
const int ClsGroup::kImgFieldNumber;
const int ClsGroup::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClsGroup::ClsGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:udorx_pbf.ClsGroup)
}

void ClsGroup::InitAsDefaultInstance() {
}

ClsGroup::ClsGroup(const ClsGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:udorx_pbf.ClsGroup)
}

void ClsGroup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClsGroup::~ClsGroup() {
  // @@protoc_insertion_point(destructor:udorx_pbf.ClsGroup)
  SharedDtor();
}

void ClsGroup::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ClsGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClsGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClsGroup_descriptor_;
}

const ClsGroup& ClsGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_udorx_5fws_5fcomm_2eproto();
  return *default_instance_;
}

ClsGroup* ClsGroup::default_instance_ = NULL;

ClsGroup* ClsGroup::New(::google::protobuf::Arena* arena) const {
  ClsGroup* n = new ClsGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClsGroup::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClsGroup*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(id_, type_);
    if (has_desc()) {
      desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_img()) {
      img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ClsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:udorx_pbf.ClsGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Desc;
        break;
      }

      // required string Desc = 2;
      case 2: {
        if (tag == 18) {
         parse_Desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "udorx_pbf.ClsGroup.Desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Img;
        break;
      }

      // required string Img = 3;
      case 3: {
        if (tag == 26) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->img().data(), this->img().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "udorx_pbf.ClsGroup.Img");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }

      // required int32 Type = 4;
      case 4: {
        if (tag == 32) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:udorx_pbf.ClsGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:udorx_pbf.ClsGroup)
  return false;
#undef DO_
}

void ClsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:udorx_pbf.ClsGroup)
  // required int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string Desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.ClsGroup.Desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // required string Img = 3;
  if (has_img()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img().data(), this->img().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.ClsGroup.Img");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->img(), output);
  }

  // required int32 Type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:udorx_pbf.ClsGroup)
}

::google::protobuf::uint8* ClsGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:udorx_pbf.ClsGroup)
  // required int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string Desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.ClsGroup.Desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // required string Img = 3;
  if (has_img()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img().data(), this->img().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.ClsGroup.Img");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->img(), target);
  }

  // required int32 Type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:udorx_pbf.ClsGroup)
  return target;
}

int ClsGroup::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_desc()) {
    // required string Desc = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  if (has_img()) {
    // required string Img = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->img());
  }

  if (has_type()) {
    // required int32 Type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
int ClsGroup::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required string Desc = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());

    // required string Img = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->img());

    // required int32 Type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClsGroup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClsGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClsGroup>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClsGroup::MergeFrom(const ClsGroup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_desc()) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (from.has_img()) {
      set_has_img();
      img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ClsGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClsGroup::CopyFrom(const ClsGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClsGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ClsGroup::Swap(ClsGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClsGroup::InternalSwap(ClsGroup* other) {
  std::swap(id_, other->id_);
  desc_.Swap(&other->desc_);
  img_.Swap(&other->img_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClsGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClsGroup_descriptor_;
  metadata.reflection = ClsGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClsGroup

// required int32 ID = 1;
bool ClsGroup::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClsGroup::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ClsGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClsGroup::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 ClsGroup::id() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.ClsGroup.ID)
  return id_;
}
 void ClsGroup::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.ClsGroup.ID)
}

// required string Desc = 2;
bool ClsGroup::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClsGroup::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void ClsGroup::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClsGroup::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
 const ::std::string& ClsGroup::desc() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.ClsGroup.Desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClsGroup::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udorx_pbf.ClsGroup.Desc)
}
 void ClsGroup::set_desc(const char* value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udorx_pbf.ClsGroup.Desc)
}
 void ClsGroup::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udorx_pbf.ClsGroup.Desc)
}
 ::std::string* ClsGroup::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:udorx_pbf.ClsGroup.Desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClsGroup::release_desc() {
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClsGroup::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:udorx_pbf.ClsGroup.Desc)
}

// required string Img = 3;
bool ClsGroup::has_img() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClsGroup::set_has_img() {
  _has_bits_[0] |= 0x00000004u;
}
void ClsGroup::clear_has_img() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClsGroup::clear_img() {
  img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img();
}
 const ::std::string& ClsGroup::img() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.ClsGroup.Img)
  return img_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClsGroup::set_img(const ::std::string& value) {
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udorx_pbf.ClsGroup.Img)
}
 void ClsGroup::set_img(const char* value) {
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udorx_pbf.ClsGroup.Img)
}
 void ClsGroup::set_img(const char* value, size_t size) {
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udorx_pbf.ClsGroup.Img)
}
 ::std::string* ClsGroup::mutable_img() {
  set_has_img();
  // @@protoc_insertion_point(field_mutable:udorx_pbf.ClsGroup.Img)
  return img_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClsGroup::release_img() {
  clear_has_img();
  return img_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClsGroup::set_allocated_img(::std::string* img) {
  if (img != NULL) {
    set_has_img();
  } else {
    clear_has_img();
  }
  img_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img);
  // @@protoc_insertion_point(field_set_allocated:udorx_pbf.ClsGroup.Img)
}

// required int32 Type = 4;
bool ClsGroup::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClsGroup::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void ClsGroup::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClsGroup::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 ClsGroup::type() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.ClsGroup.Type)
  return type_;
}
 void ClsGroup::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.ClsGroup.Type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PPointLL::kLatFieldNumber;
const int PPointLL::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PPointLL::PPointLL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:udorx_pbf.PPointLL)
}

void PPointLL::InitAsDefaultInstance() {
}

PPointLL::PPointLL(const PPointLL& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:udorx_pbf.PPointLL)
}

void PPointLL::SharedCtor() {
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PPointLL::~PPointLL() {
  // @@protoc_insertion_point(destructor:udorx_pbf.PPointLL)
  SharedDtor();
}

void PPointLL::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PPointLL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PPointLL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PPointLL_descriptor_;
}

const PPointLL& PPointLL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_udorx_5fws_5fcomm_2eproto();
  return *default_instance_;
}

PPointLL* PPointLL::default_instance_ = NULL;

PPointLL* PPointLL::New(::google::protobuf::Arena* arena) const {
  PPointLL* n = new PPointLL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PPointLL::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PPointLL*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lat_, lon_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PPointLL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:udorx_pbf.PPointLL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float lat = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_lon;
        break;
      }

      // required float lon = 2;
      case 2: {
        if (tag == 21) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:udorx_pbf.PPointLL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:udorx_pbf.PPointLL)
  return false;
#undef DO_
}

void PPointLL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:udorx_pbf.PPointLL)
  // required float lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lat(), output);
  }

  // required float lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:udorx_pbf.PPointLL)
}

::google::protobuf::uint8* PPointLL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:udorx_pbf.PPointLL)
  // required float lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lat(), target);
  }

  // required float lon = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:udorx_pbf.PPointLL)
  return target;
}

int PPointLL::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_lat()) {
    // required float lat = 1;
    total_size += 1 + 4;
  }

  if (has_lon()) {
    // required float lon = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
int PPointLL::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float lat = 1;
    total_size += 1 + 4;

    // required float lon = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PPointLL::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PPointLL* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PPointLL>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PPointLL::MergeFrom(const PPointLL& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PPointLL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PPointLL::CopyFrom(const PPointLL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPointLL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PPointLL::Swap(PPointLL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PPointLL::InternalSwap(PPointLL* other) {
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PPointLL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PPointLL_descriptor_;
  metadata.reflection = PPointLL_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PPointLL

// required float lat = 1;
bool PPointLL::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PPointLL::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
void PPointLL::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
void PPointLL::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
 float PPointLL::lat() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.PPointLL.lat)
  return lat_;
}
 void PPointLL::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.PPointLL.lat)
}

// required float lon = 2;
bool PPointLL::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PPointLL::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
void PPointLL::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
void PPointLL::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
 float PPointLL::lon() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.PPointLL.lon)
  return lon_;
}
 void PPointLL::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.PPointLL.lon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoiData::kIDFieldNumber;
const int PoiData::kGrIDFieldNumber;
const int PoiData::kNameFieldNumber;
const int PoiData::kRadiusFieldNumber;
const int PoiData::kTypeFieldNumber;
const int PoiData::kColorFieldNumber;
const int PoiData::kPntsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoiData::PoiData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:udorx_pbf.PoiData)
}

void PoiData::InitAsDefaultInstance() {
}

PoiData::PoiData(const PoiData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:udorx_pbf.PoiData)
}

void PoiData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grid_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radius_ = 0;
  type_ = 0;
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoiData::~PoiData() {
  // @@protoc_insertion_point(destructor:udorx_pbf.PoiData)
  SharedDtor();
}

void PoiData::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PoiData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoiData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoiData_descriptor_;
}

const PoiData& PoiData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_udorx_5fws_5fcomm_2eproto();
  return *default_instance_;
}

PoiData* PoiData::default_instance_ = NULL;

PoiData* PoiData::New(::google::protobuf::Arena* arena) const {
  PoiData* n = new PoiData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoiData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PoiData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(grid_, color_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  pnts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PoiData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:udorx_pbf.PoiData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "udorx_pbf.PoiData.ID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grID;
        break;
      }

      // required int32 grID = 2;
      case 2: {
        if (tag == 16) {
         parse_grID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_)));
          set_has_grid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // required string Name = 3;
      case 3: {
        if (tag == 26) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "udorx_pbf.PoiData.Name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_Radius;
        break;
      }

      // required float Radius = 4;
      case 4: {
        if (tag == 37) {
         parse_Radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }

      // required int32 Type = 5;
      case 5: {
        if (tag == 40) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_color;
        break;
      }

      // required int32 color = 6;
      case 6: {
        if (tag == 48) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pnts;
        break;
      }

      // repeated .udorx_pbf.PPointLL pnts = 7;
      case 7: {
        if (tag == 58) {
         parse_pnts:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pnts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pnts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_pnts;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:udorx_pbf.PoiData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:udorx_pbf.PoiData)
  return false;
#undef DO_
}

void PoiData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:udorx_pbf.PoiData)
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.PoiData.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required int32 grID = 2;
  if (has_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grid(), output);
  }

  // required string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.PoiData.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required float Radius = 4;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->radius(), output);
  }

  // required int32 Type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // required int32 color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->color(), output);
  }

  // repeated .udorx_pbf.PPointLL pnts = 7;
  for (unsigned int i = 0, n = this->pnts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pnts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:udorx_pbf.PoiData)
}

::google::protobuf::uint8* PoiData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:udorx_pbf.PoiData)
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.PoiData.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 grID = 2;
  if (has_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grid(), target);
  }

  // required string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "udorx_pbf.PoiData.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required float Radius = 4;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->radius(), target);
  }

  // required int32 Type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // required int32 color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->color(), target);
  }

  // repeated .udorx_pbf.PPointLL pnts = 7;
  for (unsigned int i = 0, n = this->pnts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pnts(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:udorx_pbf.PoiData)
  return target;
}

int PoiData::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required string ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_grid()) {
    // required int32 grID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grid());
  }

  if (has_name()) {
    // required string Name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_radius()) {
    // required float Radius = 4;
    total_size += 1 + 4;
  }

  if (has_type()) {
    // required int32 Type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_color()) {
    // required int32 color = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());
  }

  return total_size;
}
int PoiData::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required int32 grID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grid());

    // required string Name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required float Radius = 4;
    total_size += 1 + 4;

    // required int32 Type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 color = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .udorx_pbf.PPointLL pnts = 7;
  total_size += 1 * this->pnts_size();
  for (int i = 0; i < this->pnts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pnts(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoiData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PoiData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PoiData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoiData::MergeFrom(const PoiData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  pnts_.MergeFrom(from.pnts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_grid()) {
      set_grid(from.grid());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PoiData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoiData::CopyFrom(const PoiData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoiData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->pnts())) return false;
  return true;
}

void PoiData::Swap(PoiData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoiData::InternalSwap(PoiData* other) {
  id_.Swap(&other->id_);
  std::swap(grid_, other->grid_);
  name_.Swap(&other->name_);
  std::swap(radius_, other->radius_);
  std::swap(type_, other->type_);
  std::swap(color_, other->color_);
  pnts_.UnsafeArenaSwap(&other->pnts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoiData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoiData_descriptor_;
  metadata.reflection = PoiData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoiData

// required string ID = 1;
bool PoiData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PoiData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PoiData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PoiData::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& PoiData::id() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.PoiData.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PoiData::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udorx_pbf.PoiData.ID)
}
 void PoiData::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udorx_pbf.PoiData.ID)
}
 void PoiData::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udorx_pbf.PoiData.ID)
}
 ::std::string* PoiData::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:udorx_pbf.PoiData.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PoiData::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PoiData::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:udorx_pbf.PoiData.ID)
}

// required int32 grID = 2;
bool PoiData::has_grid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PoiData::set_has_grid() {
  _has_bits_[0] |= 0x00000002u;
}
void PoiData::clear_has_grid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PoiData::clear_grid() {
  grid_ = 0;
  clear_has_grid();
}
 ::google::protobuf::int32 PoiData::grid() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.PoiData.grID)
  return grid_;
}
 void PoiData::set_grid(::google::protobuf::int32 value) {
  set_has_grid();
  grid_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.PoiData.grID)
}

// required string Name = 3;
bool PoiData::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PoiData::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void PoiData::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void PoiData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PoiData::name() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.PoiData.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PoiData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udorx_pbf.PoiData.Name)
}
 void PoiData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udorx_pbf.PoiData.Name)
}
 void PoiData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udorx_pbf.PoiData.Name)
}
 ::std::string* PoiData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:udorx_pbf.PoiData.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PoiData::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PoiData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:udorx_pbf.PoiData.Name)
}

// required float Radius = 4;
bool PoiData::has_radius() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PoiData::set_has_radius() {
  _has_bits_[0] |= 0x00000008u;
}
void PoiData::clear_has_radius() {
  _has_bits_[0] &= ~0x00000008u;
}
void PoiData::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
 float PoiData::radius() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.PoiData.Radius)
  return radius_;
}
 void PoiData::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.PoiData.Radius)
}

// required int32 Type = 5;
bool PoiData::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PoiData::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void PoiData::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void PoiData::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 PoiData::type() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.PoiData.Type)
  return type_;
}
 void PoiData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.PoiData.Type)
}

// required int32 color = 6;
bool PoiData::has_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PoiData::set_has_color() {
  _has_bits_[0] |= 0x00000020u;
}
void PoiData::clear_has_color() {
  _has_bits_[0] &= ~0x00000020u;
}
void PoiData::clear_color() {
  color_ = 0;
  clear_has_color();
}
 ::google::protobuf::int32 PoiData::color() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.PoiData.color)
  return color_;
}
 void PoiData::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:udorx_pbf.PoiData.color)
}

// repeated .udorx_pbf.PPointLL pnts = 7;
int PoiData::pnts_size() const {
  return pnts_.size();
}
void PoiData::clear_pnts() {
  pnts_.Clear();
}
const ::udorx_pbf::PPointLL& PoiData::pnts(int index) const {
  // @@protoc_insertion_point(field_get:udorx_pbf.PoiData.pnts)
  return pnts_.Get(index);
}
::udorx_pbf::PPointLL* PoiData::mutable_pnts(int index) {
  // @@protoc_insertion_point(field_mutable:udorx_pbf.PoiData.pnts)
  return pnts_.Mutable(index);
}
::udorx_pbf::PPointLL* PoiData::add_pnts() {
  // @@protoc_insertion_point(field_add:udorx_pbf.PoiData.pnts)
  return pnts_.Add();
}
::google::protobuf::RepeatedPtrField< ::udorx_pbf::PPointLL >*
PoiData::mutable_pnts() {
  // @@protoc_insertion_point(field_mutable_list:udorx_pbf.PoiData.pnts)
  return &pnts_;
}
const ::google::protobuf::RepeatedPtrField< ::udorx_pbf::PPointLL >&
PoiData::pnts() const {
  // @@protoc_insertion_point(field_list:udorx_pbf.PoiData.pnts)
  return pnts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClsLogin::kLgnFieldNumber;
const int ClsLogin::kAssetsFieldNumber;
const int ClsLogin::kAGroupsFieldNumber;
const int ClsLogin::kPoisFieldNumber;
const int ClsLogin::kPGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClsLogin::ClsLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:udorx_pbf.ClsLogin)
}

void ClsLogin::InitAsDefaultInstance() {
  lgn_ = const_cast< ::udorx_pbf::CLogin*>(&::udorx_pbf::CLogin::default_instance());
}

ClsLogin::ClsLogin(const ClsLogin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:udorx_pbf.ClsLogin)
}

void ClsLogin::SharedCtor() {
  _cached_size_ = 0;
  lgn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClsLogin::~ClsLogin() {
  // @@protoc_insertion_point(destructor:udorx_pbf.ClsLogin)
  SharedDtor();
}

void ClsLogin::SharedDtor() {
  if (this != default_instance_) {
    delete lgn_;
  }
}

void ClsLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClsLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClsLogin_descriptor_;
}

const ClsLogin& ClsLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_udorx_5fws_5fcomm_2eproto();
  return *default_instance_;
}

ClsLogin* ClsLogin::default_instance_ = NULL;

ClsLogin* ClsLogin::New(::google::protobuf::Arena* arena) const {
  ClsLogin* n = new ClsLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClsLogin::Clear() {
  if (has_lgn()) {
    if (lgn_ != NULL) lgn_->::udorx_pbf::CLogin::Clear();
  }
  assets_.Clear();
  a_groups_.Clear();
  pois_.Clear();
  p_groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ClsLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:udorx_pbf.ClsLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .udorx_pbf.CLogin lgn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lgn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_assets;
        break;
      }

      // repeated .udorx_pbf.AssetData assets = 2;
      case 2: {
        if (tag == 18) {
         parse_assets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_assets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_assets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_assets;
        if (input->ExpectTag(26)) goto parse_loop_a_groups;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .udorx_pbf.ClsGroup a_groups = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_a_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_a_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_a_groups;
        if (input->ExpectTag(34)) goto parse_loop_pois;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .udorx_pbf.PoiData pois = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pois:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pois()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_pois;
        if (input->ExpectTag(42)) goto parse_loop_p_groups;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .udorx_pbf.ClsGroup p_groups = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_p_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_p_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_p_groups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:udorx_pbf.ClsLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:udorx_pbf.ClsLogin)
  return false;
#undef DO_
}

void ClsLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:udorx_pbf.ClsLogin)
  // required .udorx_pbf.CLogin lgn = 1;
  if (has_lgn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->lgn_, output);
  }

  // repeated .udorx_pbf.AssetData assets = 2;
  for (unsigned int i = 0, n = this->assets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->assets(i), output);
  }

  // repeated .udorx_pbf.ClsGroup a_groups = 3;
  for (unsigned int i = 0, n = this->a_groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->a_groups(i), output);
  }

  // repeated .udorx_pbf.PoiData pois = 4;
  for (unsigned int i = 0, n = this->pois_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pois(i), output);
  }

  // repeated .udorx_pbf.ClsGroup p_groups = 5;
  for (unsigned int i = 0, n = this->p_groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->p_groups(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:udorx_pbf.ClsLogin)
}

::google::protobuf::uint8* ClsLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:udorx_pbf.ClsLogin)
  // required .udorx_pbf.CLogin lgn = 1;
  if (has_lgn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->lgn_, target);
  }

  // repeated .udorx_pbf.AssetData assets = 2;
  for (unsigned int i = 0, n = this->assets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->assets(i), target);
  }

  // repeated .udorx_pbf.ClsGroup a_groups = 3;
  for (unsigned int i = 0, n = this->a_groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->a_groups(i), target);
  }

  // repeated .udorx_pbf.PoiData pois = 4;
  for (unsigned int i = 0, n = this->pois_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pois(i), target);
  }

  // repeated .udorx_pbf.ClsGroup p_groups = 5;
  for (unsigned int i = 0, n = this->p_groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->p_groups(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:udorx_pbf.ClsLogin)
  return target;
}

int ClsLogin::ByteSize() const {
  int total_size = 0;

  // required .udorx_pbf.CLogin lgn = 1;
  if (has_lgn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lgn_);
  }
  // repeated .udorx_pbf.AssetData assets = 2;
  total_size += 1 * this->assets_size();
  for (int i = 0; i < this->assets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assets(i));
  }

  // repeated .udorx_pbf.ClsGroup a_groups = 3;
  total_size += 1 * this->a_groups_size();
  for (int i = 0; i < this->a_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->a_groups(i));
  }

  // repeated .udorx_pbf.PoiData pois = 4;
  total_size += 1 * this->pois_size();
  for (int i = 0; i < this->pois_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pois(i));
  }

  // repeated .udorx_pbf.ClsGroup p_groups = 5;
  total_size += 1 * this->p_groups_size();
  for (int i = 0; i < this->p_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->p_groups(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClsLogin::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClsLogin* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClsLogin>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClsLogin::MergeFrom(const ClsLogin& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  assets_.MergeFrom(from.assets_);
  a_groups_.MergeFrom(from.a_groups_);
  pois_.MergeFrom(from.pois_);
  p_groups_.MergeFrom(from.p_groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgn()) {
      mutable_lgn()->::udorx_pbf::CLogin::MergeFrom(from.lgn());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ClsLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClsLogin::CopyFrom(const ClsLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClsLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_lgn()) {
    if (!this->lgn_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->assets())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->a_groups())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pois())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->p_groups())) return false;
  return true;
}

void ClsLogin::Swap(ClsLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClsLogin::InternalSwap(ClsLogin* other) {
  std::swap(lgn_, other->lgn_);
  assets_.UnsafeArenaSwap(&other->assets_);
  a_groups_.UnsafeArenaSwap(&other->a_groups_);
  pois_.UnsafeArenaSwap(&other->pois_);
  p_groups_.UnsafeArenaSwap(&other->p_groups_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClsLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClsLogin_descriptor_;
  metadata.reflection = ClsLogin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClsLogin

// required .udorx_pbf.CLogin lgn = 1;
bool ClsLogin::has_lgn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClsLogin::set_has_lgn() {
  _has_bits_[0] |= 0x00000001u;
}
void ClsLogin::clear_has_lgn() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClsLogin::clear_lgn() {
  if (lgn_ != NULL) lgn_->::udorx_pbf::CLogin::Clear();
  clear_has_lgn();
}
const ::udorx_pbf::CLogin& ClsLogin::lgn() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.ClsLogin.lgn)
  return lgn_ != NULL ? *lgn_ : *default_instance_->lgn_;
}
::udorx_pbf::CLogin* ClsLogin::mutable_lgn() {
  set_has_lgn();
  if (lgn_ == NULL) {
    lgn_ = new ::udorx_pbf::CLogin;
  }
  // @@protoc_insertion_point(field_mutable:udorx_pbf.ClsLogin.lgn)
  return lgn_;
}
::udorx_pbf::CLogin* ClsLogin::release_lgn() {
  clear_has_lgn();
  ::udorx_pbf::CLogin* temp = lgn_;
  lgn_ = NULL;
  return temp;
}
void ClsLogin::set_allocated_lgn(::udorx_pbf::CLogin* lgn) {
  delete lgn_;
  lgn_ = lgn;
  if (lgn) {
    set_has_lgn();
  } else {
    clear_has_lgn();
  }
  // @@protoc_insertion_point(field_set_allocated:udorx_pbf.ClsLogin.lgn)
}

// repeated .udorx_pbf.AssetData assets = 2;
int ClsLogin::assets_size() const {
  return assets_.size();
}
void ClsLogin::clear_assets() {
  assets_.Clear();
}
const ::udorx_pbf::AssetData& ClsLogin::assets(int index) const {
  // @@protoc_insertion_point(field_get:udorx_pbf.ClsLogin.assets)
  return assets_.Get(index);
}
::udorx_pbf::AssetData* ClsLogin::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:udorx_pbf.ClsLogin.assets)
  return assets_.Mutable(index);
}
::udorx_pbf::AssetData* ClsLogin::add_assets() {
  // @@protoc_insertion_point(field_add:udorx_pbf.ClsLogin.assets)
  return assets_.Add();
}
::google::protobuf::RepeatedPtrField< ::udorx_pbf::AssetData >*
ClsLogin::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:udorx_pbf.ClsLogin.assets)
  return &assets_;
}
const ::google::protobuf::RepeatedPtrField< ::udorx_pbf::AssetData >&
ClsLogin::assets() const {
  // @@protoc_insertion_point(field_list:udorx_pbf.ClsLogin.assets)
  return assets_;
}

// repeated .udorx_pbf.ClsGroup a_groups = 3;
int ClsLogin::a_groups_size() const {
  return a_groups_.size();
}
void ClsLogin::clear_a_groups() {
  a_groups_.Clear();
}
const ::udorx_pbf::ClsGroup& ClsLogin::a_groups(int index) const {
  // @@protoc_insertion_point(field_get:udorx_pbf.ClsLogin.a_groups)
  return a_groups_.Get(index);
}
::udorx_pbf::ClsGroup* ClsLogin::mutable_a_groups(int index) {
  // @@protoc_insertion_point(field_mutable:udorx_pbf.ClsLogin.a_groups)
  return a_groups_.Mutable(index);
}
::udorx_pbf::ClsGroup* ClsLogin::add_a_groups() {
  // @@protoc_insertion_point(field_add:udorx_pbf.ClsLogin.a_groups)
  return a_groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::udorx_pbf::ClsGroup >*
ClsLogin::mutable_a_groups() {
  // @@protoc_insertion_point(field_mutable_list:udorx_pbf.ClsLogin.a_groups)
  return &a_groups_;
}
const ::google::protobuf::RepeatedPtrField< ::udorx_pbf::ClsGroup >&
ClsLogin::a_groups() const {
  // @@protoc_insertion_point(field_list:udorx_pbf.ClsLogin.a_groups)
  return a_groups_;
}

// repeated .udorx_pbf.PoiData pois = 4;
int ClsLogin::pois_size() const {
  return pois_.size();
}
void ClsLogin::clear_pois() {
  pois_.Clear();
}
const ::udorx_pbf::PoiData& ClsLogin::pois(int index) const {
  // @@protoc_insertion_point(field_get:udorx_pbf.ClsLogin.pois)
  return pois_.Get(index);
}
::udorx_pbf::PoiData* ClsLogin::mutable_pois(int index) {
  // @@protoc_insertion_point(field_mutable:udorx_pbf.ClsLogin.pois)
  return pois_.Mutable(index);
}
::udorx_pbf::PoiData* ClsLogin::add_pois() {
  // @@protoc_insertion_point(field_add:udorx_pbf.ClsLogin.pois)
  return pois_.Add();
}
::google::protobuf::RepeatedPtrField< ::udorx_pbf::PoiData >*
ClsLogin::mutable_pois() {
  // @@protoc_insertion_point(field_mutable_list:udorx_pbf.ClsLogin.pois)
  return &pois_;
}
const ::google::protobuf::RepeatedPtrField< ::udorx_pbf::PoiData >&
ClsLogin::pois() const {
  // @@protoc_insertion_point(field_list:udorx_pbf.ClsLogin.pois)
  return pois_;
}

// repeated .udorx_pbf.ClsGroup p_groups = 5;
int ClsLogin::p_groups_size() const {
  return p_groups_.size();
}
void ClsLogin::clear_p_groups() {
  p_groups_.Clear();
}
const ::udorx_pbf::ClsGroup& ClsLogin::p_groups(int index) const {
  // @@protoc_insertion_point(field_get:udorx_pbf.ClsLogin.p_groups)
  return p_groups_.Get(index);
}
::udorx_pbf::ClsGroup* ClsLogin::mutable_p_groups(int index) {
  // @@protoc_insertion_point(field_mutable:udorx_pbf.ClsLogin.p_groups)
  return p_groups_.Mutable(index);
}
::udorx_pbf::ClsGroup* ClsLogin::add_p_groups() {
  // @@protoc_insertion_point(field_add:udorx_pbf.ClsLogin.p_groups)
  return p_groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::udorx_pbf::ClsGroup >*
ClsLogin::mutable_p_groups() {
  // @@protoc_insertion_point(field_mutable_list:udorx_pbf.ClsLogin.p_groups)
  return &p_groups_;
}
const ::google::protobuf::RepeatedPtrField< ::udorx_pbf::ClsGroup >&
ClsLogin::p_groups() const {
  // @@protoc_insertion_point(field_list:udorx_pbf.ClsLogin.p_groups)
  return p_groups_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PEmplList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PEmplList::PEmplList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:udorx_pbf.PEmplList)
}

void PEmplList::InitAsDefaultInstance() {
}

PEmplList::PEmplList(const PEmplList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:udorx_pbf.PEmplList)
}

void PEmplList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PEmplList::~PEmplList() {
  // @@protoc_insertion_point(destructor:udorx_pbf.PEmplList)
  SharedDtor();
}

void PEmplList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PEmplList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PEmplList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PEmplList_descriptor_;
}

const PEmplList& PEmplList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_udorx_5fws_5fcomm_2eproto();
  return *default_instance_;
}

PEmplList* PEmplList::default_instance_ = NULL;

PEmplList* PEmplList::New(::google::protobuf::Arena* arena) const {
  PEmplList* n = new PEmplList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PEmplList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PEmplList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:udorx_pbf.PEmplList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .udorx_pbf.PEmpl list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:udorx_pbf.PEmplList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:udorx_pbf.PEmplList)
  return false;
#undef DO_
}

void PEmplList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:udorx_pbf.PEmplList)
  // repeated .udorx_pbf.PEmpl list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:udorx_pbf.PEmplList)
}

::google::protobuf::uint8* PEmplList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:udorx_pbf.PEmplList)
  // repeated .udorx_pbf.PEmpl list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:udorx_pbf.PEmplList)
  return target;
}

int PEmplList::ByteSize() const {
  int total_size = 0;

  // repeated .udorx_pbf.PEmpl list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PEmplList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PEmplList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PEmplList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PEmplList::MergeFrom(const PEmplList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  list_.MergeFrom(from.list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PEmplList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PEmplList::CopyFrom(const PEmplList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEmplList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void PEmplList::Swap(PEmplList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PEmplList::InternalSwap(PEmplList* other) {
  list_.UnsafeArenaSwap(&other->list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PEmplList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PEmplList_descriptor_;
  metadata.reflection = PEmplList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PEmplList

// repeated .udorx_pbf.PEmpl list = 1;
int PEmplList::list_size() const {
  return list_.size();
}
void PEmplList::clear_list() {
  list_.Clear();
}
const ::udorx_pbf::PEmpl& PEmplList::list(int index) const {
  // @@protoc_insertion_point(field_get:udorx_pbf.PEmplList.list)
  return list_.Get(index);
}
::udorx_pbf::PEmpl* PEmplList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:udorx_pbf.PEmplList.list)
  return list_.Mutable(index);
}
::udorx_pbf::PEmpl* PEmplList::add_list() {
  // @@protoc_insertion_point(field_add:udorx_pbf.PEmplList.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::udorx_pbf::PEmpl >*
PEmplList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:udorx_pbf.PEmplList.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::udorx_pbf::PEmpl >&
PEmplList::list() const {
  // @@protoc_insertion_point(field_list:udorx_pbf.PEmplList.list)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RttHBList::kEventsFieldNumber;
const int RttHBList::kCsListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RttHBList::RttHBList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:udorx_pbf.RttHBList)
}

void RttHBList::InitAsDefaultInstance() {
  cs_list_ = const_cast< ::udorx_pbf::PCSList*>(&::udorx_pbf::PCSList::default_instance());
}

RttHBList::RttHBList(const RttHBList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:udorx_pbf.RttHBList)
}

void RttHBList::SharedCtor() {
  _cached_size_ = 0;
  cs_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RttHBList::~RttHBList() {
  // @@protoc_insertion_point(destructor:udorx_pbf.RttHBList)
  SharedDtor();
}

void RttHBList::SharedDtor() {
  if (this != default_instance_) {
    delete cs_list_;
  }
}

void RttHBList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RttHBList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RttHBList_descriptor_;
}

const RttHBList& RttHBList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_udorx_5fws_5fcomm_2eproto();
  return *default_instance_;
}

RttHBList* RttHBList::default_instance_ = NULL;

RttHBList* RttHBList::New(::google::protobuf::Arena* arena) const {
  RttHBList* n = new RttHBList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RttHBList::Clear() {
  if (has_cs_list()) {
    if (cs_list_ != NULL) cs_list_->::udorx_pbf::PCSList::Clear();
  }
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RttHBList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:udorx_pbf.RttHBList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .udorx_pbf.RttHB events = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_events;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_cs_list;
        break;
      }

      // optional .udorx_pbf.PCSList cs_list = 2;
      case 2: {
        if (tag == 18) {
         parse_cs_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cs_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:udorx_pbf.RttHBList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:udorx_pbf.RttHBList)
  return false;
#undef DO_
}

void RttHBList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:udorx_pbf.RttHBList)
  // repeated .udorx_pbf.RttHB events = 1;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(i), output);
  }

  // optional .udorx_pbf.PCSList cs_list = 2;
  if (has_cs_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cs_list_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:udorx_pbf.RttHBList)
}

::google::protobuf::uint8* RttHBList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:udorx_pbf.RttHBList)
  // repeated .udorx_pbf.RttHB events = 1;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->events(i), target);
  }

  // optional .udorx_pbf.PCSList cs_list = 2;
  if (has_cs_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->cs_list_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:udorx_pbf.RttHBList)
  return target;
}

int RttHBList::ByteSize() const {
  int total_size = 0;

  // optional .udorx_pbf.PCSList cs_list = 2;
  if (has_cs_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cs_list_);
  }

  // repeated .udorx_pbf.RttHB events = 1;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RttHBList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RttHBList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RttHBList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RttHBList::MergeFrom(const RttHBList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cs_list()) {
      mutable_cs_list()->::udorx_pbf::PCSList::MergeFrom(from.cs_list());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RttHBList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RttHBList::CopyFrom(const RttHBList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RttHBList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->events())) return false;
  if (has_cs_list()) {
    if (!this->cs_list_->IsInitialized()) return false;
  }
  return true;
}

void RttHBList::Swap(RttHBList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RttHBList::InternalSwap(RttHBList* other) {
  events_.UnsafeArenaSwap(&other->events_);
  std::swap(cs_list_, other->cs_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RttHBList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RttHBList_descriptor_;
  metadata.reflection = RttHBList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RttHBList

// repeated .udorx_pbf.RttHB events = 1;
int RttHBList::events_size() const {
  return events_.size();
}
void RttHBList::clear_events() {
  events_.Clear();
}
const ::udorx_pbf::RttHB& RttHBList::events(int index) const {
  // @@protoc_insertion_point(field_get:udorx_pbf.RttHBList.events)
  return events_.Get(index);
}
::udorx_pbf::RttHB* RttHBList::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:udorx_pbf.RttHBList.events)
  return events_.Mutable(index);
}
::udorx_pbf::RttHB* RttHBList::add_events() {
  // @@protoc_insertion_point(field_add:udorx_pbf.RttHBList.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::udorx_pbf::RttHB >*
RttHBList::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:udorx_pbf.RttHBList.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::udorx_pbf::RttHB >&
RttHBList::events() const {
  // @@protoc_insertion_point(field_list:udorx_pbf.RttHBList.events)
  return events_;
}

// optional .udorx_pbf.PCSList cs_list = 2;
bool RttHBList::has_cs_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RttHBList::set_has_cs_list() {
  _has_bits_[0] |= 0x00000002u;
}
void RttHBList::clear_has_cs_list() {
  _has_bits_[0] &= ~0x00000002u;
}
void RttHBList::clear_cs_list() {
  if (cs_list_ != NULL) cs_list_->::udorx_pbf::PCSList::Clear();
  clear_has_cs_list();
}
const ::udorx_pbf::PCSList& RttHBList::cs_list() const {
  // @@protoc_insertion_point(field_get:udorx_pbf.RttHBList.cs_list)
  return cs_list_ != NULL ? *cs_list_ : *default_instance_->cs_list_;
}
::udorx_pbf::PCSList* RttHBList::mutable_cs_list() {
  set_has_cs_list();
  if (cs_list_ == NULL) {
    cs_list_ = new ::udorx_pbf::PCSList;
  }
  // @@protoc_insertion_point(field_mutable:udorx_pbf.RttHBList.cs_list)
  return cs_list_;
}
::udorx_pbf::PCSList* RttHBList::release_cs_list() {
  clear_has_cs_list();
  ::udorx_pbf::PCSList* temp = cs_list_;
  cs_list_ = NULL;
  return temp;
}
void RttHBList::set_allocated_cs_list(::udorx_pbf::PCSList* cs_list) {
  delete cs_list_;
  cs_list_ = cs_list;
  if (cs_list) {
    set_has_cs_list();
  } else {
    clear_has_cs_list();
  }
  // @@protoc_insertion_point(field_set_allocated:udorx_pbf.RttHBList.cs_list)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace udorx_pbf

// @@protoc_insertion_point(global_scope)
